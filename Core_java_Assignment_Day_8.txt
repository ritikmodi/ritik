Name : Ritik Modi


DEVELOPER CODE

package MyArithException;

public class Calculator {
    public int caldouble(int num) throws MyArithException {
        if (num == 0) {
            throw new MyArithException("Zero not allowed");
        } else if (num < 0) {
            throw new MyArithException("Negative not allowed");
        }
        return num * 2;
    }
}




package MyArithException;

public class MyArithException extends Exception {
    public MyArithException(String message) {
        super(message);
    }
}



CLIENT CODE
package MyArithException;
import java.util.Scanner;

import MyArithException.MyArithException;

public class MyCalcApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();

        Calculator calculator = new Calculator();
        try {
            int result = calculator.caldouble(number);
            System.out.println("Double of the number is: " + result);
        } catch (MyArithException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}



Q2


DEVELOPER CODE
package pack5;

public class NumberNotDivisibleBySevenException extends Exception {
    public NumberNotDivisibleBySevenException(String message) {
        super(message);
    }
}




CLIENT CODE
package client_5;

import pack5.NumberNotDivisibleBySevenException;

class MyMath {
	public void disp(int num) throws NumberNotDivisibleBySevenException
	{
		if(num%7!=0)
		{
			throw new NumberNotDivisibleBySevenException("The number " + num + " is not divisible by 7.");
		}else
		{
			System.out.println(num);
		}
	}
}
public class Demo1 {

	public static void main(String[] args) {
		MyMath myMath = new MyMath();
		try {
			myMath.disp(7); //We Have To Give Input Here 
		} catch (NumberNotDivisibleBySevenException e) {
			e.printStackTrace();
		}
		
	}

}





Q3

package firstpro;
class MyException extends Exception {
    public MyException(String message) {
        super(message);
    }
}
public class Demo1
{
	    public void show1() throws MyException {
	        try {
	            show2();
	        } catch (MyException e) {
	            System.out.println(e.getMessage());
	        }
	    }

	    public void show2() throws MyException {
	        show3(11); // we have to give input
	    }

	    public void show3(int num) throws MyException {
	        if (num > 10) {
	            throw new MyException("Number is greater than 10");
	        } else {
	            System.out.println(num);
	        }
	    }

	    public static void main(String[] args) throws MyException {
	        Demo1 demo1 = new Demo1();
	        demo1.show1();
	    }
	}




Q4


DEVELOPER CODE
package pack6;
public class InvalidLengthException extends Exception {
    public InvalidLengthException(String message) {
        super(message);
    }
}


CLIENT CODE
package client_6;
import pack6.InvalidLengthException;
class Authenticator {
    private String password;

    public Authenticator(String password) throws InvalidLengthException {
        if (password.length() < 5 || password.length() > 9) {
            throw new InvalidLengthException("Password length should be between 5 and 9 characters");
        }
        this.password = password;
    }

    public void done() {
        System.out.println("Successful authentication");
    }
}
public class Demo {
    public static void main(String[] args) {
Authenticator authenticator = new Authenticator("password");
        authenticator.done();       
 try {
            Authenticator authenticator = new Authenticator("password");
            authenticator.done();
        } catch (InvalidLengthException e) {
            System.out.println(e.getMessage());
        }
    }
}




Q5

DEVELOPER CODE

/**
 * 
 */
package pack7;

/**
 * @author ritik
 */
public class ResourceNotAllocatedException extends Exception {
    public ResourceNotAllocatedException(String message) {
        super(message);
    }
}


CLIENT CODE
package client_7;

class MyResource implements AutoCloseable {
    private int capacity;

    public MyResource(int capacity) throws ResourceNotAllocatedException {
        if (capacity > 100) {
            throw new ResourceNotAllocatedException("not sufficient space");
        }
        this.capacity = capacity;
    }

    public void disp() {
        System.out.println("successful");
    }
    public void close() {
        System.out.println("resource is closed");
    }
}
public class Demo1 {
    public static void main(String[] args) throws ResourceNotAllocatedException {
        try {
            MyResource myResource = new MyResource(110);
            myResource.disp();
        } catch (ResourceNotAllocatedException e) {
            System.out.println(e.getMessage());
        }
        try (MyResource myResource = new MyResource(10)) {
            myResource.disp();
    }
}
}
